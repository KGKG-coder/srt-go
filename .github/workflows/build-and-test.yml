name: SRT GO v2.2.1 Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test-environment:
    name: Test Environment Setup
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: srt_whisper_lite/electron-react-app/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install Node.js dependencies
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        npm ci
        cd react-app && npm ci
        
    - name: Verify embedded Python
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        if (Test-Path "mini_python\python.exe") {
          Write-Host "‚úÖ Embedded Python found"
          .\mini_python\python.exe --version
        } else {
          Write-Host "‚ö†Ô∏è Embedded Python not found, will use system Python"
        }
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy torch soundfile librosa pytest
        
    - name: Test Python backend
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        python python/test_backend_minimal.py --quick-test
        
  build-react:
    name: Build React Frontend
    runs-on: windows-latest
    needs: test-environment
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: srt_whisper_lite/electron-react-app/package-lock.json
        
    - name: Install dependencies
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        npm ci
        cd react-app && npm ci
        
    - name: Build React application
      working-directory: srt_whisper_lite/electron-react-app
      run: npm run react:build
      
    - name: Upload React build
      uses: actions/upload-artifact@v3
      with:
        name: react-build
        path: srt_whisper_lite/electron-react-app/react-app/build
        retention-days: 1

  test-core-functionality:
    name: Test Core Functionality
    runs-on: windows-latest
    needs: test-environment
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy torch soundfile librosa pytest
        
    - name: Run unit tests
      working-directory: tests
      run: |
        if (Test-Path "unit") {
          python -m pytest unit/ -v --tb=short
        } else {
          Write-Host "‚ö†Ô∏è Unit tests directory not found, skipping"
        }
        
    - name: Run integration tests
      working-directory: tests
      run: |
        if (Test-Path "integration") {
          python -m pytest integration/ -v --tb=short
        } else {
          Write-Host "‚ö†Ô∏è Integration tests directory not found, skipping"
        }
        
    - name: Run performance tests
      working-directory: tests
      run: |
        if (Test-Path "performance") {
          python run_all_tests.py --quick-mode
        } else {
          Write-Host "‚ö†Ô∏è Performance tests not found, skipping"
        }

  build-electron:
    name: Build Electron Application
    runs-on: windows-latest
    needs: [test-environment, build-react, test-core-functionality]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: srt_whisper_lite/electron-react-app/package-lock.json
        
    - name: Download React build
      uses: actions/download-artifact@v3
      with:
        name: react-build
        path: srt_whisper_lite/electron-react-app/react-app/build
        
    - name: Install dependencies
      working-directory: srt_whisper_lite/electron-react-app
      run: npm ci
      
    - name: Build Electron application
      working-directory: srt_whisper_lite/electron-react-app
      run: npm run build:installer-dir
      
    - name: Verify build output
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        if (Test-Path "dist\win-unpacked\SRT GO - AI Subtitle Generator.exe") {
          Write-Host "‚úÖ Executable built successfully"
          $size = (Get-Item "dist\win-unpacked\SRT GO - AI Subtitle Generator.exe").Length
          Write-Host "üì¶ Size: $([math]::Round($size/1MB, 1)) MB"
        } else {
          Write-Host "‚ùå Executable not found"
          exit 1
        }
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: srt-go-build
        path: srt_whisper_lite/electron-react-app/dist/win-unpacked
        retention-days: 7

  build-complete-release:
    name: Build Complete Release Package
    runs-on: windows-latest
    needs: build-electron
    if: github.event_name == 'release' || contains(github.ref, 'main')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: srt_whisper_lite/electron-react-app/package-lock.json
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: srt-go-build
        path: srt_whisper_lite/electron-react-app/dist/win-unpacked
        
    - name: Install dependencies
      working-directory: srt_whisper_lite/electron-react-app
      run: npm ci
      
    - name: Build complete release package
      working-directory: srt_whisper_lite/electron-react-app
      run: npm run build:complete
      
    - name: Upload complete release
      uses: actions/upload-artifact@v3
      with:
        name: srt-go-complete-release
        path: srt_whisper_lite/electron-react-app/dist-complete
        retention-days: 30
        
    - name: Create Release Archive
      if: github.event_name == 'release'
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        Compress-Archive -Path "dist-complete\*" -DestinationPath "SRT-GO-Complete-v2.2.1.zip"
        
    - name: Upload to Release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: srt_whisper_lite/electron-react-app/SRT-GO-Complete-v2.2.1.zip
        asset_name: SRT-GO-Complete-v2.2.1.zip
        asset_content_type: application/zip

  quality-checks:
    name: Quality Assurance Checks
    runs-on: windows-latest
    needs: build-electron
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: srt-go-build
        path: srt_whisper_lite/electron-react-app/dist/win-unpacked
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest numpy soundfile
        
    - name: Run QA smoke tests
      working-directory: srt_whisper_lite/electron-react-app
      run: |
        # Ê™¢Êü•ÂèØÂü∑Ë°åÊñá‰ª∂
        if (Test-Path "dist\win-unpacked\SRT GO - AI Subtitle Generator.exe") {
          Write-Host "‚úÖ Main executable exists"
        } else {
          Write-Host "‚ùå Main executable missing"
          exit 1
        }
        
        # Ê™¢Êü•ÂøÖË¶ÅË≥áÊ∫ê
        if (Test-Path "dist\win-unpacked\resources") {
          Write-Host "‚úÖ Resources directory exists"
        } else {
          Write-Host "‚ùå Resources directory missing"
          exit 1
        }
        
        # Ê™¢Êü•PythonÂæåÁ´Ø
        if (Test-Path "dist\win-unpacked\resources\resources\python") {
          Write-Host "‚úÖ Python backend included"
        } else {
          Write-Host "‚ùå Python backend missing"
          exit 1
        }
        
    - name: Generate QA Report
      run: |
        $report = @"
# GitHub Actions QA Report

**Build Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**Commit**: $env:GITHUB_SHA
**Branch**: $env:GITHUB_REF

## Test Results
- ‚úÖ Build completed successfully
- ‚úÖ All artifacts generated
- ‚úÖ Quality checks passed

## Build Artifacts
- üì¶ Main executable: SRT GO - AI Subtitle Generator.exe
- üìÅ Complete application package
- üìã Technical documentation

**Status**: Ready for Production ‚úÖ
"@
        
        $report | Out-File -FilePath "qa-report.md" -Encoding UTF8
        
    - name: Upload QA Report
      uses: actions/upload-artifact@v3
      with:
        name: qa-report
        path: qa-report.md
        retention-days: 30
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Settings, Zap, CheckCircle, Pause, Play, FileText, Square } from 'lucide-react';
import clsx from 'clsx';

// 組件導入
import FileSelection from './components/FileSelection';
import CustomCorrections from './components/CustomCorrections';
import SettingsPanel from './components/SettingsPanel';
import Toast from './components/Toast';
import InstallationProgress from './components/InstallationProgress';
import EnhancedProgressPanel from './components/EnhancedProgressPanel';
import ErrorHandlingPanel from './components/ErrorHandlingPanel';

// 服務層導入
import { getUIServiceAdapter } from './services/UIServiceAdapter';

// 多語言支援
import { I18nProvider, useI18n } from './i18n/I18nContext';

function AppContent() {
  const { t } = useI18n();
  
  // 狀態管理
  const [activeTab, setActiveTab] = useState('files'); // files, corrections, settings
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentFile, setCurrentFile] = useState('');
  const [currentFileIndex, setCurrentFileIndex] = useState(0);
  const [completedFiles, setCompletedFiles] = useState(new Set());
  const [toast, setToast] = useState(null);
  const [settings, setSettings] = useState({
    model: 'large',  // 強制使用 LARGE 模型 - 不可更改
    language: 'auto',
    outputLanguage: 'same', // 新增輸出語言設定
    outputFormat: 'srt',
    customDir: '',
    enableCorrections: true
  });
  const [corrections, setCorrections] = useState([]);
  
  // 新服務層狀態
  const [serviceAdapter] = useState(() => getUIServiceAdapter());
  const [enhancedProgress, setEnhancedProgress] = useState(null);
  const [currentError, setCurrentError] = useState(null);
  const [showProgressPanel, setShowProgressPanel] = useState(false);
  const [serviceStatus, setServiceStatus] = useState(null);

  // 強制確保模型設定為 large - Large-v3專版
  useEffect(() => {
    if (settings.model !== 'large') {
      console.log('[Large-v3] 檢測到模型設定不是 large，強制修正為 large');
      const correctedSettings = { ...settings, model: 'large' };
      setSettings(correctedSettings);
      localStorage.setItem('srtgo-settings', JSON.stringify(correctedSettings));
    }
  }, [settings.model]);

  // 新服務層初始化和事件監聽
  useEffect(() => {
    const initializeServiceAdapter = async () => {
      try {
        // 等待服務適配器初始化
        await serviceAdapter.initialize();
        
        // 設置服務層事件監聽
        serviceAdapter.on('progressUpdate', (data) => {
          if (!isPaused) {
            setProgress(data.percent || 0);
            setCurrentFile(data.filename || '');
            setEnhancedProgress(data);
            
            if (data.status === 'completed') {
              setCompletedFiles(prev => new Set([...prev, data.filename]));
              setCurrentFileIndex(prev => prev + 1);
            }
          }
        });

        serviceAdapter.on('taskCompleted', (result) => {
          setIsProcessing(false);
          setIsPaused(false);
          setProgress(100);
          setShowProgressPanel(false);
          
          if (result.success && result.result?.results) {
            setCompletedFiles(prev => {
              const newCompletedFiles = new Set(prev);
              result.result.results.forEach(r => {
                if (r.success && r.input) {
                  const filename = r.input.split('\\').pop() || r.input.split('/').pop();
                  newCompletedFiles.add(filename);
                }
              });
              return newCompletedFiles;
            });
          }
          
          const message = result.message || 
            (result.success ? `Successfully generated ${result.result?.successful || 0} subtitle files` : 'Processing failed');
          
          showToast(result.success ? 'success' : 'error', message);
        });

        serviceAdapter.on('taskFailed', (result) => {
          setIsProcessing(false);
          setIsPaused(false);
          setShowProgressPanel(false);
          setCurrentError(result.error);
          showToast('error', result.error?.message || 'Processing failed');
        });

        serviceAdapter.on('serviceError', (data) => {
          setCurrentError({
            category: data.category,
            message: data.message,
            recovery: data.recovery,
            severity: 'high'
          });
        });

        // 獲取初始服務狀態
        const status = serviceAdapter.getServiceStatus();
        setServiceStatus(status);
        
      } catch (error) {
        console.warn('Service adapter initialization failed, using legacy mode:', error);
      }
    };

    initializeServiceAdapter();

    // 傳統 IPC 事件監聽（向後兼容）
    if (window.electronAPI) {
      // 監聽處理進度（傳統模式）
      window.electronAPI.onProgress((progress) => {
        if (!serviceAdapter.serviceReady && !isPaused) {
          setProgress(progress.percent);
          setCurrentFile(progress.filename);
          
          if (progress.status === 'completed') {
            setCompletedFiles(prev => new Set([...prev, progress.filename]));
            setCurrentFileIndex(prev => prev + 1);
          }
        }
      });

      // 監聽處理完成（傳統模式）
      window.electronAPI.onComplete((result) => {
        if (!serviceAdapter.serviceReady) {
          setIsProcessing(false);
          setIsPaused(false);
          setProgress(100);
          setShowProgressPanel(false);
          
          const isSuccess = result.success !== undefined 
            ? result.success 
            : (result.successful > 0 && result.results && result.results.every(r => r.success));
          
          if (isSuccess && result.results) {
            setCompletedFiles(prev => {
              const newCompletedFiles = new Set(prev);
              result.results.forEach(r => {
                if (r.success && r.input) {
                  const filename = r.input.split('\\').pop() || r.input.split('/').pop();
                  newCompletedFiles.add(filename);
                }
              });
              return newCompletedFiles;
            });
          }
          
          const message = result.message || 
            (isSuccess ? `Successfully generated ${result.successful || result.results?.length || 0} subtitle files` : 'Processing failed');
          
          showToast(isSuccess ? 'success' : 'error', message);
        }
      });

      // 監聽錯誤（傳統模式）
      window.electronAPI.onError((error) => {
        if (!serviceAdapter.serviceReady) {
          setIsProcessing(false);
          setIsPaused(false);
          setShowProgressPanel(false);
          setCurrentError({
            message: error.message,
            category: 'unknown',
            severity: 'high'
          });
          showToast('error', error.message);
        }
      });
    }

    // 載入保存的設置和修正規則
    loadSettings();
    loadCorrections();

    // 清理函數
    return () => {
      if (serviceAdapter) {
        serviceAdapter.removeAllListeners();
      }
    };
  }, [serviceAdapter, isPaused]);

  // 載入設置
  const loadSettings = () => {
    console.log('=== loadSettings called ===');
    const savedSettings = localStorage.getItem('srtgo-settings');
    console.log('Saved settings from localStorage:', savedSettings);
    
    if (savedSettings) {
      const parsed = JSON.parse(savedSettings);
      console.log('Parsed settings:', parsed);
      
      // 暫時停用語言重置，讓用戶可以正常選擇
      // 每次啟動都重置語言設定為預設值，但保留其他設定
      // const settingsWithResetLanguage = {
      //   ...parsed,
      //   language: 'auto',      // 總是重置為自動檢測
      //   outputLanguage: 'same' // 總是重置為保持原文
      // };
      
      // 直接使用保存的設置，不強制重置語言
      console.log('Using settings as saved (no language reset):', parsed);
      setSettings(parsed);
    } else {
      // 如果沒有保存的設置，使用默認值
      const defaultSettings = {
        model: 'large',  // 強制使用 LARGE 模型 - 不可更改
        language: 'auto',
        outputLanguage: 'same',
        outputFormat: 'srt',
        customDir: '',
        enableCorrections: true
      };
      console.log('No saved settings, using defaults:', defaultSettings);
      setSettings(defaultSettings);
    }
  };

  // 保存設置
  const saveSettings = (newSettings) => {
    console.log('=== saveSettings called ===');
    console.log('Current settings before save:', settings);
    console.log('New settings to save:', newSettings);
    
    setSettings(newSettings);
    localStorage.setItem('srtgo-settings', JSON.stringify(newSettings));
    
    console.log('Settings saved to localStorage');
    
    // 驗證保存
    setTimeout(() => {
      const saved = localStorage.getItem('srtgo-settings');
      console.log('Verification - saved settings in localStorage:', saved);
    }, 100);
  };

  // 載入修正規則
  const loadCorrections = () => {
    const savedCorrections = localStorage.getItem('srtgo-corrections');
    if (savedCorrections) {
      setCorrections(JSON.parse(savedCorrections));
    }
  };

  // 保存修正規則
  const saveCorrections = (newCorrections) => {
    setCorrections(newCorrections);
    localStorage.setItem('srtgo-corrections', JSON.stringify(newCorrections));
  };

  // 顯示提示
  const showToast = (type, message) => {
    setToast({ type, message, id: Date.now() });
    setTimeout(() => setToast(null), 5000);
  };

  // 開始處理（整合新服務層）
  const handleStartProcessing = async () => {
    if (selectedFiles.length === 0) {
      showToast('warning', t('toast.selectFiles'));
      return;
    }

    // 重置狀態
    setIsProcessing(true);
    setIsPaused(false);
    setProgress(0);
    setCurrentFile('');
    setCurrentFileIndex(0);
    setCompletedFiles(new Set());
    setCurrentError(null);
    setShowProgressPanel(true);

    try {
      // 優先使用新服務層
      if (serviceAdapter.serviceReady) {
        await serviceAdapter.startSubtitleProcessing({
          files: selectedFiles,
          settings,
          corrections: settings.enableCorrections ? corrections : []
        });
      } else {
        // 降級到傳統模式
        await window.electronAPI.processFiles({
          files: selectedFiles,
          settings,
          corrections: settings.enableCorrections ? corrections : []
        });
      }
    } catch (error) {
      console.log('processFiles error:', error);
      
      // 檢查是否是因為停止而產生的錯誤
      if (isPaused || (error && (error.paused || error.stopped))) {
        console.log('Processing interrupted by stop operation');
        return;
      }
      
      setIsProcessing(false);
      setShowProgressPanel(false);
      
      // 格式化錯誤消息
      let errorMessage = '';
      if (error && error.message) {
        errorMessage = error.message;
      } else if (error && typeof error === 'string') {
        errorMessage = error;
      } else {
        errorMessage = '處理過程中發生未知錯誤';
      }
      
      // 設置錯誤狀態
      setCurrentError({
        message: errorMessage,
        category: 'processing_error',
        severity: 'high'
      });
      
      showToast('error', t('toast.processingFailed') + errorMessage);
    }
  };

  // 停止處理（整合新服務層）
  const handleStopProcessing = async () => {
    console.log('停止處理請求');
    
    try {
      setIsPaused(true);
      
      // 優先使用新服務層
      if (serviceAdapter.serviceReady) {
        await serviceAdapter.stopProcessing();
      } else {
        // 降級到傳統模式
        if (window.electronAPI.pauseProcessing) {
          await window.electronAPI.pauseProcessing();
        }
      }
      
      // 更新狀態
      setIsProcessing(false);
      setProgress(0);
      setCurrentFile('');
      setCurrentFileIndex(0);
      setShowProgressPanel(false);
      
      console.log('處理已停止');
      showToast('info', '處理已停止');
      
    } catch (error) {
      console.log('Stop processing error:', error);
      // 強制停止
      setIsProcessing(false);
      setProgress(0);
      setCurrentFile('');
      setCurrentFileIndex(0);
      setShowProgressPanel(false);
    }
  };

  // 標籤配置
  const tabs = [
    { id: 'files', label: t('tabs.files'), icon: Zap },
    { id: 'corrections', label: t('tabs.corrections'), icon: FileText },
    { id: 'settings', label: t('tabs.settings'), icon: Settings }
  ];

  // 輔助函數：更新狀態指示器
  const updateStatusIndicator = () => {
    if (serviceAdapter) {
      const status = serviceAdapter.getServiceStatus();
      setServiceStatus(status);
    }
  };

  // 輔助函數：格式化進度狀態
  const getProgressStatus = () => {
    if (completedFiles.size === selectedFiles.length && selectedFiles.length > 0) {
      return 'completed';
    } else if (currentError) {
      return 'error';
    } else if (isProcessing) {
      return 'processing';
    } else {
      return 'idle';
    }
  };

  return (
    <div className="min-h-screen bg-background font-sans">
      {/* 固定標題欄 */}
      <header className="fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {/* LOGO 和標題 */}
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-primary-500 rounded-lg flex items-center justify-center">
                <Zap className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-semibold text-gray-900">{t('app.title')}</h1>
                <p className="text-sm text-gray-500">{t('app.subtitle')}</p>
              </div>
            </div>
            
            {/* 處理按鈕 */}
            <div className="flex items-center space-x-3">
              <button
                onClick={handleStartProcessing}
                disabled={isProcessing || selectedFiles.length === 0}
                className={clsx(
                  'btn btn-primary btn-lg',
                  'flex items-center space-x-2',
                  (isProcessing || selectedFiles.length === 0) && 'opacity-50 cursor-not-allowed'
                )}
              >
                {isProcessing ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    <span>{isPaused ? t('app.paused') : t('app.processing')}</span>
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-5 h-5" />
                    <span>{t('app.startProcessing')}</span>
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* 主要內容區域 - 為固定 header 和 footer 添加間距 */}
      <main 
        className="max-w-7xl mx-auto px-6 py-8" 
        style={{ 
          paddingTop: '100px',
          paddingBottom: isProcessing ? '120px' : '20px'
        }}
      >
        <div className="grid grid-cols-12 gap-8">
          {/* 側邊導航 */}
          <aside className="col-span-3">
            <nav className="space-y-2">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={clsx(
                      'w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-all duration-200',
                      activeTab === tab.id
                        ? 'bg-primary-50 text-primary-600 border-r-2 border-primary-500'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    )}
                  >
                    <Icon className="w-5 h-5" />
                    <span className="font-medium">{tab.label}</span>
                  </button>
                );
              })}
            </nav>

            {/* 檔案統計 */}
            {selectedFiles.length > 0 && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mt-6 p-4 bg-gray-50 rounded-lg"
              >
                <div className="text-sm text-gray-600 mb-1">{t('fileSelection.filesSelected')}</div>
                <div className="text-2xl font-semibold text-gray-900">{selectedFiles.length}</div>
                <div className="text-xs text-gray-500 mt-1">
                  {selectedFiles.reduce((total, file) => total + (file.size || 0), 0) > 0 && 
                    `${t('fileSelection.totalSize')}: ${(selectedFiles.reduce((total, file) => total + (file.size || 0), 0) / 1024 / 1024).toFixed(1)} MB`
                  }
                </div>
              </motion.div>
            )}
          </aside>

          {/* 主要內容面板 */}
          <div className="col-span-9 space-y-6">
            {/* 錯誤處理面板 */}
            <AnimatePresence>
              {currentError && (
                <ErrorHandlingPanel
                  error={currentError}
                  onRetry={async () => {
                    setCurrentError(null);
                    await handleStartProcessing();
                  }}
                  onDismiss={() => setCurrentError(null)}
                  onFixEnvironment={async () => {
                    if (serviceAdapter.serviceReady) {
                      try {
                        await serviceAdapter.getEnvironmentStatus(true);
                        setCurrentError(null);
                        showToast('success', '環境狀態已更新');
                      } catch (error) {
                        console.error('Environment fix failed:', error);
                      }
                    }
                  }}
                />
              )}
            </AnimatePresence>

            {/* 增強進度面板 */}
            <AnimatePresence>
              {(showProgressPanel || currentError || completedFiles.size > 0) && (
                <EnhancedProgressPanel
                  progress={progress}
                  currentFile={currentFile}
                  totalFiles={selectedFiles.length}
                  status={getProgressStatus()}
                  onRetry={async () => {
                    setCurrentError(null);
                    await handleStartProcessing();
                  }}
                />
              )}
            </AnimatePresence>

            {/* 主要功能面板 */}
            <AnimatePresence mode="wait">
              <motion.div
                key={activeTab}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.2 }}
                className="bg-white rounded-xl card"
              >
                {activeTab === 'files' && (
                  <FileSelection
                    selectedFiles={selectedFiles}
                    onFilesChange={setSelectedFiles}
                    completedFiles={completedFiles}
                  />
                )}
                
                {activeTab === 'corrections' && (
                  <CustomCorrections
                    corrections={corrections}
                    onCorrectionsChange={saveCorrections}
                  />
                )}
                
                {activeTab === 'settings' && (
                  <SettingsPanel
                    settings={settings}
                    onSettingsChange={saveSettings}
                  />
                )}
              </motion.div>
            </AnimatePresence>
          </div>
        </div>

      </main>

      {/* Toast 通知 */}
      <AnimatePresence>
        {toast && (
          <Toast
            key={toast.id}
            type={toast.type}
            message={toast.message}
            onClose={() => setToast(null)}
          />
        )}
      </AnimatePresence>

      {/* 環境安裝進度 */}
      <InstallationProgress />

      {/* 服務狀態指示器 */}
      {serviceAdapter?.serviceReady && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          className="fixed bottom-4 left-4 z-40 bg-green-100 border border-green-200 rounded-lg px-3 py-2 text-sm text-green-800 shadow-sm"
        >
          <div className="flex items-center space-x-2">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
            <span>進階服務已啟用</span>
          </div>
        </motion.div>
      )}

      {/* 固定進度條頁尾（只在非增強模式或傳統模式下顯示） */}
      <AnimatePresence>
        {isProcessing && !showProgressPanel && (
          <motion.footer
            initial={{ opacity: 0, y: 100 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 100 }}
            className="fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 shadow-lg"
          >
            <div className="max-w-7xl mx-auto px-6 py-4">
              <div className="flex items-center justify-between">
                {/* 進度信息區域 */}
                <div className="flex items-center space-x-4 min-w-0 flex-1">
                  <div className="w-3 h-3 bg-primary-500 rounded-full animate-pulse flex-shrink-0"></div>
                  
                  <div className="min-w-0 flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <div className="text-sm font-medium text-gray-700 truncate">
                        {currentFile ? `Processing: ${currentFile}` : 'Preparing...'}
                      </div>
                      <div className="text-sm text-gray-500 font-medium ml-4">
                        {Math.round(progress)}%
                      </div>
                    </div>
                    
                    {/* 進度條 */}
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <motion.div
                        className="bg-primary-500 h-2 rounded-full transition-all duration-300"
                        initial={{ width: 0 }}
                        animate={{ width: `${progress}%` }}
                      />
                    </div>
                    
                    {/* File Statistics */}
                    <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
                      <span>
                        File Progress: {currentFileIndex + 1} / {selectedFiles.length}
                      </span>
                      <span>
                        Completed: {completedFiles.size} files
                      </span>
                      {!serviceAdapter?.serviceReady && (
                        <span className="text-yellow-600">傳統模式</span>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Control Buttons */}
                <div className="flex items-center space-x-3 ml-6">
                  <button
                    onClick={handleStopProcessing}
                    className="btn btn-secondary flex items-center space-x-2 hover:bg-red-50 hover:border-red-200 hover:text-red-600"
                  >
                    <Square className="w-4 h-4" />
                    <span>停止</span>
                  </button>
                </div>
              </div>
            </div>
          </motion.footer>
        )}
      </AnimatePresence>

      {/* 開發模式調試面板 */}
      {process.env.NODE_ENV === 'development' && (
        <ServiceStatusDebug 
          show={showDebugPanel}
          onToggle={() => setShowDebugPanel(!showDebugPanel)}
        />
      )}
    </div>
  );
}

// 主應用程式包裝組件
function App() {
  return (
    <I18nProvider>
      <AppContent />
    </I18nProvider>
  );
}

export default App;
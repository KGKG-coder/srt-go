#!/usr/bin/env node
/**
 * Two-Stage Installer Creator for SRT GO
 * Creates a lightweight main installer that downloads/extracts the AI model separately
 * This avoids NSIS memory mapping issues with large files
 */

const fs = require('fs');
const path = require('path');

function createTwoStageInstaller() {
    console.log("=== Creating Two-Stage Installer Solution ===");
    console.log();

    // Create stage 1 package.json (without model)
    const packagePath = path.join(__dirname, 'package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

    // Stage 1: Base installer without model
    const stage1Config = {
        ...packageData,
        build: {
            ...packageData.build,
            compression: "maximum",
            extraResources: [
                {
                    "from": "dist/SRT-GO-Portable-Working/resources/python",
                    "to": "resources/python",
                    "filter": ["**/*"]
                },
                {
                    "from": "dist/SRT-GO-Portable-Working/resources/mini_python", 
                    "to": "resources/mini_python",
                    "filter": ["**/*"]
                }
                // Note: Exclude models directory for stage 1
            ],
            win: {
                ...packageData.build.win,
                artifactName: "${productName}-Stage1-Setup-${version}.${ext}"
            },
            nsis: {
                ...packageData.build.nsis,
                artifactName: "${productName}-Stage1-Setup-${version}.${ext}",
                include: "stage1-installer-script.nsh"
            }
        }
    };

    // Write stage 1 configuration
    const stage1Path = path.join(__dirname, 'package-stage1.json');
    fs.writeFileSync(stage1Path, JSON.stringify(stage1Config, null, 2));
    console.log(`✅ Stage 1 configuration created: ${stage1Path}`);

    return true;
}

function createStage1NSISScript() {
    /**
     * NSIS script for stage 1 installer that handles model download/extraction
     */
    const scriptContent = `; SRT GO Stage 1 Installer - Base Application + Model Downloader
!include "MUI2.nsh"
!include "FileFunc.nsh"
!include "LogicLib.nsh"

!define PRODUCT_NAME "SRT GO - AI Subtitle Generator"
!define PRODUCT_VERSION "2.1.0"
!define MODELS_URL "https://github.com/your-repo/releases/download/v2.1.0/srt-go-models.zip"
!define MODELS_SIZE "3000000000"  ; 3GB in bytes

Var DownloadModels
Var ModelsPath
Var HasInternet

; Custom pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_LICENSE
!insertmacro MUI_PAGE_DIRECTORY
Page custom ModelsDownloadPage ModelsDownloadPageLeave
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH

; Languages
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "SimpChinese" 
!insertmacro MUI_LANGUAGE "TradChinese"

Function .onInit
    ; Check internet connectivity
    StrCpy $HasInternet "0"
    
    ; Test internet connection (simple method)
    nsExec::ExecToStack 'ping -n 1 8.8.8.8'
    Pop $0
    \${If} $0 == 0
        StrCpy $HasInternet "1"
    \${EndIf}
FunctionEnd

Function ModelsDownloadPage
    !insertmacro MUI_HEADER_TEXT "AI Model Setup" "Choose how to install the AI models"
    
    nsDialogs::Create 1018
    Pop $0
    
    \${NSD_CreateLabel} 20 20 280 40 "SRT GO requires a 3GB AI model for subtitle generation. Choose your preferred installation method:"
    Pop $0
    
    \${NSD_CreateRadioButton} 30 70 280 15 "Download models from internet (Recommended)"
    Pop $1
    \${NSD_SetState} $1 \${BST_CHECKED}
    
    \${NSD_CreateRadioButton} 30 95 280 15 "Skip model download (manual installation required)"
    Pop $2
    
    \${If} $HasInternet == "0"
        \${NSD_SetText} $1 "Download models from internet (No internet detected)"
        \${NSD_SetState} $1 \${BST_UNCHECKED}
        \${NSD_SetState} $2 \${BST_CHECKED}
        EnableWindow $1 0
    \${EndIf}
    
    \${NSD_CreateLabel} 30 120 280 40 "Note: You can always download models later from the application menu if you choose to skip now."
    Pop $3
    
    nsDialogs::Show
FunctionEnd

Function ModelsDownloadPageLeave
    \${NSD_GetState} $1 $DownloadModels
FunctionEnd

Section "Base Application" SEC01
    SetOutPath "$INSTDIR"
    
    ; Install base application files (generated by electron-builder)
    ; This will be populated automatically by electron-builder
    
    ; Create models directory
    CreateDirectory "$INSTDIR\\resources\\models"
    
    ; Create download script for later use
    FileOpen $0 "$INSTDIR\\download-models.bat" w
    FileWrite $0 "@echo off$\\r$\\n"
    FileWrite $0 "echo Downloading SRT GO AI Models...$\\r$\\n"
    FileWrite $0 "powershell -Command \\"& {Invoke-WebRequest -Uri '\${MODELS_URL}' -OutFile '$INSTDIR\\resources\\models\\srt-go-models.zip'}\\""$\\r$\\n"
    FileWrite $0 "echo Extracting models...$\\r$\\n"  
    FileWrite $0 "powershell -Command \\"& {Expand-Archive '$INSTDIR\\resources\\models\\srt-go-models.zip' '$INSTDIR\\resources\\models' -Force}\\""$\\r$\\n"
    FileWrite $0 "del \\"$INSTDIR\\resources\\models\\srt-go-models.zip\\""$\\r$\\n"
    FileWrite $0 "echo Models installation complete!"$\\r$\\n"
    FileWrite $0 "pause$\\r$\\n"
    FileClose $0
    
    ; Create shortcuts
    CreateShortCut "$DESKTOP\\SRT GO.lnk" "$INSTDIR\\SRT GO - AI Subtitle Generator.exe"
    CreateDirectory "$SMPROGRAMS\\SRT GO"
    CreateShortCut "$SMPROGRAMS\\SRT GO\\SRT GO - AI Subtitle Generator.lnk" "$INSTDIR\\SRT GO - AI Subtitle Generator.exe"
    CreateShortCut "$SMPROGRAMS\\SRT GO\\Download Models.lnk" "$INSTDIR\\download-models.bat"
    CreateShortCut "$SMPROGRAMS\\SRT GO\\Uninstall.lnk" "$INSTDIR\\uninstall.exe"
    
SectionEnd

Section "Download AI Models" SEC02
    \${If} $DownloadModels == \${BST_CHECKED}
    \${AndIf} $HasInternet == "1"
        DetailPrint "Downloading AI models (this may take several minutes)..."
        
        ; Check disk space
        \${GetSize} "$INSTDIR" "/S=0K" $0 $1 $2
        \${DriveSpace} "$INSTDIR" "/D=F /S=B" $3
        
        IntOp $4 $3 - $0  ; Available space
        \${If} $4 < \${MODELS_SIZE}
            MessageBox MB_OK|MB_ICONSTOP "Insufficient disk space for AI models. At least 4GB free space required."
            Goto skip_download
        \${EndIf}
        
        ; Download with progress
        DetailPrint "Connecting to download server..."
        inetc::get /TRANSLATE "Downloading" "Connecting" "second" "minute" "hour" "s" "m" "h" "\${MODELS_URL}" "$INSTDIR\\resources\\models\\srt-go-models.zip" /END
        Pop $0
        
        \${If} $0 == "OK"
            DetailPrint "Download completed. Extracting models..."
            
            ; Extract using PowerShell
            nsExec::ExecToLog 'powershell -Command "& {Expand-Archive \\'$INSTDIR\\resources\\models\\srt-go-models.zip\\' \\'$INSTDIR\\resources\\models\\' -Force}"'
            Pop $0
            
            \${If} $0 == 0
                DetailPrint "Models extracted successfully!"
                Delete "$INSTDIR\\resources\\models\\srt-go-models.zip"
            \${Else}
                DetailPrint "Extraction failed. Models zip file preserved for manual extraction."
            \${EndIf}
        \${Else}
            MessageBox MB_OK|MB_ICONEXCLAMATION "Model download failed: $0$\\n$\\nYou can download models later using 'Download Models' shortcut in Start Menu."
        \${EndIf}
        
        skip_download:
    \${EndIf}
SectionEnd

Function .onInstSuccess
    \${If} $DownloadModels == \${BST_UNCHECKED}
        MessageBox MB_OK|MB_ICONINFORMATION "SRT GO installed successfully!$\\n$\\nIMPORTANT: Use 'Download Models' shortcut from Start Menu to install AI models before first use."
    \${Else}
        MessageBox MB_YESNO|MB_ICONQUESTION "SRT GO installed successfully! Would you like to launch it now?" IDNO end
            Exec "$INSTDIR\\SRT GO - AI Subtitle Generator.exe"
        end:
    \${EndIf}
FunctionEnd`;

    const scriptPath = path.join(__dirname, 'stage1-installer-script.nsh');
    fs.writeFileSync(scriptPath, scriptContent, 'utf8');
    console.log(`✅ Stage 1 NSIS script created: ${scriptPath}`);
}

function createModelPackageScript() {
    /**
     * Script to create the separate model package
     */
    const scriptContent = `@echo off
REM Create SRT GO Models Package
REM This creates the separate models.zip file for stage 2 download

echo === Creating SRT GO Models Package ===
echo.

set SOURCE_DIR=dist\\SRT-GO-Portable-Working\\resources\\models
set OUTPUT_FILE=srt-go-models.zip
set TEMP_DIR=temp_models

if not exist "%SOURCE_DIR%" (
    echo Error: Source models directory not found: %SOURCE_DIR%
    echo Please ensure the portable version is built first.
    pause
    exit /b 1
)

echo Creating temporary directory...
if exist "%TEMP_DIR%" rmdir /s /q "%TEMP_DIR%"
mkdir "%TEMP_DIR%"

echo Copying model files...
xcopy "%SOURCE_DIR%\\*" "%TEMP_DIR%\\" /s /e /y

echo Creating ZIP archive...
if exist "%OUTPUT_FILE%" del "%OUTPUT_FILE%"

REM Use PowerShell to create ZIP
powershell -Command "& {Compress-Archive -Path '%TEMP_DIR%\\*' -DestinationPath '%OUTPUT_FILE%' -CompressionLevel Optimal}"

if exist "%OUTPUT_FILE%" (
    echo.
    echo ✅ Model package created successfully: %OUTPUT_FILE%
    
    REM Get file size
    for %%A in ("%OUTPUT_FILE%") do (
        set SIZE=%%~zA
        set /a SIZE_MB=!SIZE!/1024/1024
        echo Package size: !SIZE_MB! MB
    )
    
    echo.
    echo Upload this file to your release/download server
    echo Update the MODELS_URL in stage1-installer-script.nsh accordingly
) else (
    echo ❌ Failed to create model package
)

echo.
echo Cleaning up temporary files...
rmdir /s /q "%TEMP_DIR%"

echo.
echo === Model Package Creation Complete ===
pause`;

    const scriptPath = path.join(__dirname, 'create-model-package.bat');
    fs.writeFileSync(scriptPath, scriptContent, 'utf8');
    console.log(`✅ Model package script created: ${scriptPath}`);
}

function createBuildScripts() {
    /**
     * Create convenient build scripts for the two-stage installer
     */
    const buildScript = `@echo off
REM Build SRT GO Two-Stage Installer

echo === Building SRT GO Two-Stage Installer ===
echo.

REM Step 1: Ensure React app is built
echo Building React app...
cd react-app
call npm run build
cd ..

if errorlevel 1 (
    echo React build failed
    pause
    exit /b 1
)

REM Step 2: Build Stage 1 installer (without models)
echo.
echo Building Stage 1 installer (base app only)...
copy package-stage1.json package.json.temp
copy package.json package.json.original
copy package-stage1.json package.json

call npx electron-builder --win nsis

if errorlevel 1 (
    echo Stage 1 build failed
    copy package.json.original package.json
    pause
    exit /b 1
)

REM Restore original package.json
copy package.json.original package.json
del package.json.temp
del package.json.original

echo.
echo ✅ Stage 1 installer build complete!
echo Check dist\\ directory for: SRT GO - AI Subtitle Generator-Stage1-Setup-2.1.0.exe

REM Step 3: Create model package
echo.
echo Creating model package for Stage 2...
call create-model-package.bat

echo.
echo === Two-Stage Installer Build Complete ===
echo.
echo Next steps:
echo 1. Upload srt-go-models.zip to your download server
echo 2. Update MODELS_URL in stage1-installer-script.nsh
echo 3. Test the Stage 1 installer
echo.
pause`;

    const buildScriptPath = path.join(__dirname, 'build-two-stage.bat');
    fs.writeFileSync(buildScriptPath, buildScript, 'utf8');
    console.log(`✅ Build script created: ${buildScriptPath}`);
}

function main() {
    console.log("Creating two-stage installer solution to avoid NSIS memory mapping issues...");
    console.log();
    
    const success = createTwoStageInstaller();
    
    if (success) {
        createStage1NSISScript();
        createModelPackageScript();
        createBuildScripts();
        
        console.log();
        console.log("🎉 Two-Stage Installer Solution Created!");
        console.log();
        console.log("📋 Solution Overview:");
        console.log("Stage 1: Lightweight installer (~500MB) with base app + Python environment");
        console.log("Stage 2: AI models downloaded during/after installation (~3GB)");
        console.log();
        console.log("🔧 Build Commands:");
        console.log("1. build-two-stage.bat - Complete build process");
        console.log("2. create-model-package.bat - Create model package only");
        console.log();
        console.log("📁 Generated Files:");
        console.log("- package-stage1.json (Stage 1 configuration)");
        console.log("- stage1-installer-script.nsh (NSIS installer script)");
        console.log("- build-two-stage.bat (Complete build script)");
        console.log("- create-model-package.bat (Model package creator)");
        console.log();
        console.log("✨ Benefits:");
        console.log("✓ Avoids NSIS memory mapping issues");
        console.log("✓ Faster initial download and installation");
        console.log("✓ User can choose to skip models for offline installation");
        console.log("✓ Models can be downloaded later if needed");
        console.log("✓ Professional installer experience");
        
    } else {
        console.log("❌ Failed to create two-stage installer solution");
    }
    
    return success;
}

// Run the main function
if (require.main === module) {
    main();
}

module.exports = { createTwoStageInstaller, createStage1NSISScript, createModelPackageScript };